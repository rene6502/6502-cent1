
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass.exe --m65c02 --nostart --tab-size 2 --line-numbers --list s:\work\github\6502-cent1\monitor\monitor.lst --output s:\work\github\6502-cent1\monitor\monitor.bin s:\work\github\6502-cent1\monitor\monitor.asm
; Sat Jan 08 13:02:56 2022

;Line		;Offset	;Hex						;Monitor				;Source

:1			;******  Processing input file: s:\work\github\6502-cent1\monitor\monitor.asm

4				=1																			CLOCK_MHZ   = 1         ; // clock frequency in MHz
6				=$3fff																	RAM_END     = $3fff
9				=$7f20																	ACIA_BASE   = $7f20
10			=32544																	ACIA_DATA   = ACIA_BASE + 0
11			=32545																	ACIA_STATUS = ACIA_BASE + 1
12			=32546																	ACIA_CMD    = ACIA_BASE + 2
13			=32547																	ACIA_CTL    = ACIA_BASE + 3
15			=">"																		PROMPT      = '>'
16			=$0d																		CR          = $0d
17			=$0a																		LF          = $0a
18			=$08																		BS          = $08
19			=$1b																		ESC         = $1b
20			=82																			LINE_LEN    = 82
21			=132																		XM_BUF_LEN  = 132
23			=1																			XM_ERR_TIMEOUT = 1
24			=2																			XM_ERR_BLOCKNO = 2
25			=3																			XM_ERR_SEQ     = 3
26			=4																			XM_ERR_CKS     = 4
28			=$01																		SOH         = $01
29			=$04																		EOT         = $04
30			=$06																		ACK         = $06
31			=$15																		NAK         = $15
32			=$18																		CAN         = $18
36			>00e0																		TEMP        .byte ? ; general purpose byte, always assume that subroutines will change this
37			>00e1																		TEMP_X      .byte ? ; X register backup
38			>00e2																		TEMP_Y      .byte ? ; Y register backup
39			>00e3																		MSGL        .byte ? ; message address LSB
40			>00e4																		MSGH        .byte ? ; message address MSB
41			>00e5																		ADDR_STARTL .byte ? ; start address
42			>00e6																		ADDR_STARTH .byte ?
43			>00e7																		ADDR_ENDL   .byte ? ; end address
44			>00e8																		ADDR_ENDH   .byte ? ;
45			>00e9																		            .align 8
46			>00f0																		XM_ERROR    .byte ? ; xmodem last error
47			>00f1																		XM_BLK_CNT  .byte ? ; xmodem expected block number
48			>00f2																		XM_BLK      .byte ? ; xmodem received block number
49			>00f3																		XM_CKS      .byte ? ; xmodem checksum
50			>00f4																		XM_ADDRL    .byte ? ; xmodem destination address
51			>00f5																		XM_ADDRH    .byte ?
52			>00f6																		XM_COUNT0   .byte ? ; xmodem counter for timeouts
53			>00f7																		XM_COUNT1   .byte ?
54			>00f8																		XM_COUNT2   .byte ?
55			>00f9																		XM_TIMEOUT  .byte ? ; xmodem timeout
56			>00fa																		LINE_CNT    .byte ? ; current number of characters in line buffer
57			>00fb																		LINE_READ   .byte ? ; line buffer read pointer
61			>3f00																		LINE_BUF    .fill LINE_LEN ; size of line buffer
62			>3f52																		            .align $10
63			>3f60																		XM_BUFFER   .fill XM_BUF_LEN
64			.3fe4																		END
67			.8000																		reset:
68			.8000		d8							cld							        cld             ; clear decimal mode
69			.8001		20 a7 83				jsr $83a7				        jsr wait100us
70			.8004		20 78 83				jsr $8378				        jsr serial_init
71			.8007		a9 d1						lda #$d1				        lda #<MSG_WELCOME
72			.8009		85 e3						sta $e3					        sta MSGL
73			.800b		a9 83						lda #$83				        lda #>MSG_WELCOME
74			.800d		85 e4						sta $e4					        sta MSGH
75			.800f		20 b7 83				jsr $83b7				        jsr write_msg
77			.8012																		ready:
78			.8012		a9 00						lda #$00				        lda #0
79			.8014		85 fa						sta $fa					        sta LINE_CNT
80			.8016		a9 3e						lda #$3e				        lda #PROMPT
81			.8018		20 83 83				jsr $8383				        jsr serial_out  ; show prompt
83			.801b																		_read_char:
84			.801b		20 9c 83				jsr $839c				        jsr serial_wait
85			.801e		20 83 83				jsr $8383				        jsr serial_out  ; echo
86			.8021		20 5d 83				jsr $835d				        jsr tolower     ; convert to lower case
87			.8024		c9 0a						cmp #$0a				        cmp #LF
88			.8026		f0 f3						beq $801b				        beq _read_char   ; ignore line feed
89			.8028		c9 0d						cmp #$0d				        cmp #CR
90			.802a		f0 22						beq $804e				        beq newline
91			.802c		a4 fa						ldy $fa					        ldy LINE_CNT
92			.802e		c9 08						cmp #$08				        cmp #BS
93			.8030		d0 0f						bne $8041				        bne _store_char
94			.8032		88							dey							        dey             ; remove last char from buffer
95			.8033		30 05						bmi $803a				        bmi _reset
96			.8035		84 fa						sty $fa					        sty LINE_CNT
97			.8037		4c 1b 80				jmp $801b				        jmp _read_char
99			.803a		a0 00						ldy #$00				_reset: ldy #0          ; beyond start
100			.803c		84 fa						sty $fa					        sty LINE_CNT
101			.803e		4c 1b 80				jmp $801b				        jmp _read_char
103			.8041																		_store_char:
104			.8041		c0 51						cpy #$51				        cpy #LINE_LEN - 1
105			.8043		b0 5d						bcs $80a2				        bcs overflow
106			.8045		99 00 3f				sta $3f00,y			        sta LINE_BUF,y
107			.8048		c8							iny							        iny
108			.8049		84 fa						sty $fa					        sty LINE_CNT
109			.804b		4c 1b 80				jmp $801b				        jmp _read_char
111			.804e																		newline:
112			.804e		20 c4 83				jsr $83c4				        jsr write_eol
113			.8051		a5 fa						lda $fa					        lda LINE_CNT
114			.8053		f0 bd						beq $8012				        beq ready       ; ignore emty lines
115			.8055		ad 00 3f				lda $3f00				        lda LINE_BUF
116			.8058		c9 3f						cmp #$3f				        cmp #'?'        ; command "?": help
117			.805a		d0 06						bne $8062				        bne _chk_x
118			.805c		20 b0 80				jsr $80b0				        jsr cmd_help
119			.805f		4c 12 80				jmp $8012				        jmp ready
120			.8062																		_chk_x:
121			.8062		c9 78						cmp #$78				        cmp #'x'        ; command "x": xmodem
122			.8064		d0 06						bne $806c				        bne _chk_r
123			.8066		20 bc 80				jsr $80bc				        jsr cmd_xmodem
124			.8069		4c 12 80				jmp $8012				        jmp ready
125			.806c																		_chk_r:
126			.806c		c9 72						cmp #$72				        cmp #'r'        ; command "r": read memory
127			.806e		d0 06						bne $8076				        bne _chk_w
128			.8070		20 bf 81				jsr $81bf				        jsr cmd_read
129			.8073		4c 12 80				jmp $8012				        jmp ready
130			.8076																		_chk_w:
131			.8076		c9 77						cmp #$77				        cmp #'w'        ; command "w": write memory
132			.8078		d0 06						bne $8080				        bne _chk_f
133			.807a		20 53 82				jsr $8253				        jsr cmd_write
134			.807d		4c 12 80				jmp $8012				        jmp ready
135			.8080																		_chk_f:
136			.8080		c9 66						cmp #$66				        cmp #'f'        ; command "f": fill memory
137			.8082		d0 06						bne $808a				        bne _chk_g
138			.8084		20 8c 82				jsr $828c				        jsr cmd_fill
139			.8087		4c 12 80				jmp $8012				        jmp ready
141			.808a																		_chk_g:
142			.808a		c9 67						cmp #$67				        cmp #'g'        ; command "g": run program
143			.808c		d0 06						bne $8094				        bne unknown
144			.808e		20 e9 82				jsr $82e9				        jsr cmd_go
145			.8091		4c 12 80				jmp $8012				        jmp ready
147			.8094																		unknown:
148			.8094		a9 df						lda #$df				        lda #<MSG_UNK_CMD
149			.8096		85 e3						sta $e3					        sta MSGL
150			.8098		a9 83						lda #$83				        lda #>MSG_UNK_CMD
151			.809a		85 e4						sta $e4					        sta MSGH
152			.809c		20 b7 83				jsr $83b7				        jsr write_msg
153			.809f		4c 12 80				jmp $8012				        jmp ready
155			.80a2																		overflow:
156			.80a2		a9 13						lda #$13				        lda #<MSG_OVERFLOW
157			.80a4		85 e3						sta $e3					        sta MSGL
158			.80a6		a9 84						lda #$84				        lda #>MSG_OVERFLOW
159			.80a8		85 e4						sta $e4					        sta MSGH
160			.80aa		20 b7 83				jsr $83b7				        jsr write_msg
161			.80ad		4c 12 80				jmp $8012				        jmp ready
163			.80b0																		cmd_help:
164			.80b0		a9 2a						lda #$2a				        lda #<MSG_HELP
165			.80b2		85 e3						sta $e3					        sta MSGL
166			.80b4		a9 84						lda #$84				        lda #>MSG_HELP
167			.80b6		85 e4						sta $e4					        sta MSGH
168			.80b8		20 b7 83				jsr $83b7				        jsr write_msg
169			.80bb		60							rts							        rts
173			.80bc																		cmd_xmodem:
174			.80bc		a5 fa						lda $fa					        lda LINE_CNT
175			.80be		c9 05						cmp #$05				        cmp #5
176			.80c0		f0 04						beq $80c6				        beq _start
177			.80c2		20 08 83				jsr $8308				        jsr show_syntax
178			.80c5		60							rts							        rts
179			.80c6																		_start:
180			.80c6		a9 f1						lda #$f1				        lda #<MSG_XM_START
181			.80c8		85 e3						sta $e3					        sta MSGL
182			.80ca		a9 83						lda #$83				        lda #>MSG_XM_START
183			.80cc		85 e4						sta $e4					        sta MSGH
184			.80ce		20 b7 83				jsr $83b7				        jsr write_msg
185			.80d1		a9 01						lda #$01				        lda #1
186			.80d3		85 fb						sta $fb					        sta LINE_READ
187			.80d5		20 14 83				jsr $8314				        jsr read_byte
188			.80d8		85 f5						sta $f5					        sta XM_ADDRH
189			.80da		20 14 83				jsr $8314				        jsr read_byte
190			.80dd		85 f4						sta $f4					        sta XM_ADDRL
191			.80df		a9 00						lda #$00				        lda #0
192			.80e1		85 f0						sta $f0					        sta XM_ERROR
193			.80e3		a9 01						lda #$01				        lda #1
194			.80e5		85 f1						sta $f1					        sta XM_BLK_CNT
195			.80e7		a9 04						lda #$04				        lda #CLOCK_MHZ*4 ; set 8sec timeout
196			.80e9		85 f9						sta $f9					        sta XM_TIMEOUT
197			.80eb																		_start_nak:
198			.80eb		a9 15						lda #$15				        lda #NAK
199			.80ed		20 8a 83				jsr $838a				        jsr serial_out_no_wait
200			.80f0																		_wait_packet:
201			.80f0		20 a0 81				jsr $81a0				        jsr _wait_byte
202			.80f3		b0 03						bcs $80f8				        bcs _char
203			.80f5		4c eb 80				jmp $80eb				        jmp _start_nak ; repeat NAK
204			.80f8																		_char:
205			.80f8		c9 01						cmp #$01				        cmp #SOH
206			.80fa		f0 1b						beq $8117				        beq _soh
207			.80fc		c9 04						cmp #$04				        cmp #EOT
208			.80fe		f0 11						beq $8111				        beq _eot
209			.8100		c9 18						cmp #$18				        cmp #CAN
210			.8102		f0 0c						beq $8110				        beq _can
211			.8104		a9 02						lda #$02				        lda #<MSG_XM_ABORT
212			.8106		85 e3						sta $e3					        sta MSGL
213			.8108		a9 84						lda #$84				        lda #>MSG_XM_ABORT
214			.810a		85 e4						sta $e4					        sta MSGH
215			.810c		20 b7 83				jsr $83b7				        jsr write_msg
216			.810f		60							rts							        rts
217			.8110																		_can:
218			.8110		60							rts							        rts
219			.8111																		_eot:
220			.8111		a9 06						lda #$06				        lda  #ACK    ; send ACK
221			.8113		20 8a 83				jsr $838a				        jsr serial_out_no_wait
222			.8116		60							rts							        rts
223			.8117																		_soh:
224			.8117		a2 00						ldx #$00				        ldx #0
225			.8119		9d 60 3f				sta $3f60,x			        sta XM_BUFFER, x
226			.811c		e8							inx							        inx
227			.811d		a9 01						lda #$01				        lda #CLOCK_MHZ*1 ; set 2sec timeout
228			.811f		85 f9						sta $f9					        sta XM_TIMEOUT
229			.8121																		_next_byte:
232			.8121		20 a0 81				jsr $81a0				        jsr _wait_byte
233			.8124		b0 05						bcs $812b				        bcs _store_byte
234			.8126		a9 01						lda #$01				        lda #XM_ERR_TIMEOUT
235			.8128		85 f0						sta $f0					        sta XM_ERROR
236			.812a		60							rts							        rts
237			.812b																		_store_byte:
238			.812b		9d 60 3f				sta $3f60,x			        sta XM_BUFFER, x
239			.812e		e8							inx							        inx
240			.812f		e0 84						cpx #$84				        cpx #XM_BUF_LEN
241			.8131		d0 ee						bne $8121				        bne _next_byte ; block incomplete -> get another byte
242			.8133																		_block_complete:
243			.8133		a2 01						ldx #$01				        ldx #1 ; block number
244			.8135		bd 60 3f				lda $3f60,x			        lda XM_BUFFER, x
245			.8138		85 f2						sta $f2					        sta XM_BLK
246			.813a		a2 02						ldx #$02				        ldx #2 ; inverse blocknumber
247			.813c		bd 60 3f				lda $3f60,x			        lda XM_BUFFER, x
248			.813f		49 ff						eor #$ff				        eor #$ff ; one's complement
249			.8141		c5 f2						cmp $f2					        cmp XM_BLK
250			.8143		f0 07						beq $814c				        beq _number_ok
251			.8145		a9 02						lda #$02				        lda #XM_ERR_BLOCKNO
252			.8147		85 f0						sta $f0					        sta XM_ERROR
253			.8149		4c eb 80				jmp $80eb				        jmp _start_nak ; block number mismatch -> start over with NAK
254			.814c																		_number_ok:
255			.814c		a5 f1						lda $f1					        lda XM_BLK_CNT
256			.814e		c5 f2						cmp $f2					        cmp XM_BLK
257			.8150		f0 07						beq $8159				        beq _count_ok
258			.8152		a9 03						lda #$03				        lda #XM_ERR_SEQ
259			.8154		85 f0						sta $f0					        sta XM_ERROR
260			.8156		4c eb 80				jmp $80eb				        jmp _start_nak ; block number sequence error -> start over with NAK
261			.8159																		_count_ok:
262			.8159		a9 00						lda #$00				        lda #0
263			.815b		85 f3						sta $f3					        sta XM_CKS
264			.815d		a2 03						ldx #$03				        ldx #3 ; first data byte
265			.815f																		_next_cks:
266			.815f		bd 60 3f				lda $3f60,x			        lda XM_BUFFER,x ; load byte from buffer
267			.8162		18							clc							        clc
268			.8163		65 f3						adc $f3					        adc XM_CKS
269			.8165		85 f3						sta $f3					        sta XM_CKS
270			.8167		e8							inx							        inx
271			.8168		e0 83						cpx #$83				        cpx #XM_BUF_LEN-1 ; exclude ckecksum
272			.816a		d0 f3						bne $815f				        bne _next_cks
273			.816c		bd 60 3f				lda $3f60,x			        lda XM_BUFFER,x ; load received checksum
274			.816f		c5 f3						cmp $f3					        cmp XM_CKS
275			.8171		f0 07						beq $817a				        beq _cks_ok
276			.8173		a9 04						lda #$04				        lda #XM_ERR_CKS
277			.8175		85 f0						sta $f0					        sta XM_ERROR
278			.8177		4c eb 80				jmp $80eb				        jmp _start_nak ; checksum error -> start over with NAK
279			.817a																		_cks_ok:
280			.817a		a2 03						ldx #$03				        ldx #3 ; first data byte
281			.817c		a0 00						ldy #$00				        ldy #0
282			.817e																		_next_write:
283			.817e		bd 60 3f				lda $3f60,x			        lda XM_BUFFER,x ; load byte from buffer
284			.8181		e8							inx							        inx
285			.8182		91 f4						sta ($f4),y			        sta (XM_ADDRL),y
286			.8184		c8							iny							        iny
287			.8185		e0 83						cpx #$83				        cpx #XM_BUF_LEN-1 ; exclude checksum
288			.8187		d0 f5						bne $817e				        bne _next_write
289			.8189		18							clc							        clc
290			.818a		a5 f4						lda $f4					        lda XM_ADDRL
291			.818c		69 80						adc #$80				        adc #128 ; increment write pointer by 128
292			.818e		85 f4						sta $f4					        sta XM_ADDRL
293			.8190		a5 f5						lda $f5					        lda XM_ADDRH
294			.8192		69 00						adc #$00				        adc #0
295			.8194		85 f5						sta $f5					        sta XM_ADDRH
296			.8196		e6 f1						inc $f1					        inc XM_BLK_CNT ; increment next expected block number
297			.8198		a9 06						lda #$06				        lda  #ACK    ; send ACK
298			.819a		20 8a 83				jsr $838a				        jsr serial_out_no_wait
299			.819d		4c f0 80				jmp $80f0				        jmp _wait_packet
305			.81a0																		_wait_byte:
306			.81a0		a9 00						lda #$00				        lda #0
307			.81a2		85 f6						sta $f6					        sta XM_COUNT0
308			.81a4		85 f7						sta $f7					        sta XM_COUNT1
309			.81a6		85 f8						sta $f8					        sta XM_COUNT2
310			.81a8																		_wait_char:
311			.81a8		20 8e 83				jsr $838e				        jsr serial_in
312			.81ab		b0 11						bcs $81be				        bcs _return
313			.81ad		e6 f6						inc $f6					        inc XM_COUNT0
314			.81af		d0 f7						bne $81a8				        bne _wait_char
315			.81b1		e6 f7						inc $f7					        inc XM_COUNT1
316			.81b3		d0 f3						bne $81a8				        bne _wait_char
317			.81b5		e6 f8						inc $f8					        inc XM_COUNT2
318			.81b7		a5 f8						lda $f8					        lda XM_COUNT2
319			.81b9		c5 f9						cmp $f9					        cmp XM_TIMEOUT
320			.81bb		d0 eb						bne $81a8				        bne _wait_char
321			.81bd		18							clc							        clc
322			.81be																		_return:
323			.81be		60							rts							        rts
328			.81bf																		cmd_read:
329			.81bf		a5 fa						lda $fa					        lda LINE_CNT
330			.81c1		c9 05						cmp #$05				        cmp #5
331			.81c3		f0 08						beq $81cd				        beq _line
332			.81c5		c9 0a						cmp #$0a				        cmp #10
333			.81c7		f0 2d						beq $81f6				        beq _block
334			.81c9		20 08 83				jsr $8308				        jsr show_syntax
335			.81cc		60							rts							        rts
337			.81cd																		_line:
338			.81cd		a9 01						lda #$01				        lda #1
339			.81cf		85 fb						sta $fb					        sta LINE_READ
340			.81d1		20 14 83				jsr $8314				        jsr read_byte
341			.81d4		85 e6						sta $e6					        sta ADDR_STARTH
342			.81d6		20 14 83				jsr $8314				        jsr read_byte
343			.81d9		85 e5						sta $e5					        sta ADDR_STARTL
344			.81db		18							clc							        clc             ; end address = start address + 8
345			.81dc		69 07						adc #$07				        adc #7
346			.81de		85 e7						sta $e7					        sta ADDR_ENDL
347			.81e0		a5 e6						lda $e6					        lda ADDR_STARTH
348			.81e2		69 00						adc #$00				        adc #0
349			.81e4		85 e8						sta $e8					        sta ADDR_ENDH
350			.81e6		b0 04						bcs $81ec				        bcs _overflow
351			.81e8		20 16 82				jsr $8216				        jsr read_block
352			.81eb		60							rts							        rts
354			.81ec																		_overflow:
355			.81ec		a9 ff						lda #$ff				        lda #$ff
356			.81ee		85 e7						sta $e7					        sta ADDR_ENDL
357			.81f0		85 e8						sta $e8					        sta ADDR_ENDH
358			.81f2		20 16 82				jsr $8216				        jsr read_block
359			.81f5		60							rts							        rts
361			.81f6																		_block:
362			.81f6		a9 01						lda #$01				        lda #1
363			.81f8		85 fb						sta $fb					        sta LINE_READ
364			.81fa		20 14 83				jsr $8314				        jsr read_byte
365			.81fd		85 e6						sta $e6					        sta ADDR_STARTH
366			.81ff		20 14 83				jsr $8314				        jsr read_byte
367			.8202		85 e5						sta $e5					        sta ADDR_STARTL
368			.8204		a9 06						lda #$06				        lda #6
369			.8206		85 fb						sta $fb					        sta LINE_READ
370			.8208		20 14 83				jsr $8314				        jsr read_byte
371			.820b		85 e8						sta $e8					        sta ADDR_ENDH
372			.820d		20 14 83				jsr $8314				        jsr read_byte
373			.8210		85 e7						sta $e7					        sta ADDR_ENDL
374			.8212		20 16 82				jsr $8216				        jsr read_block
375			.8215		60							rts							        rts
379			.8216																		read_block:
380			.8216		a5 e6						lda $e6					        lda ADDR_STARTH
381			.8218		20 3c 83				jsr $833c				        jsr write_byte
382			.821b		a5 e5						lda $e5					        lda ADDR_STARTL
383			.821d		20 3c 83				jsr $833c				        jsr write_byte
384			.8220		a0 00						ldy #$00				        ldy #0
385			.8222																		_byte:
386			.8222		a9 20						lda #$20				        lda #' '
387			.8224		20 83 83				jsr $8383				        jsr serial_out
388			.8227		84 e0						sty $e0					        sty TEMP
389			.8229		a0 00						ldy #$00				        ldy #0
390			.822b		b1 e5						lda ($e5),y			        lda (ADDR_STARTL),y
391			.822d		a4 e0						ldy $e0					        ldy TEMP
392			.822f		20 3c 83				jsr $833c				        jsr write_byte
393			.8232		a5 e5						lda $e5					        lda ADDR_STARTL ; check end address LSB
394			.8234		c5 e7						cmp $e7					        cmp ADDR_ENDL
395			.8236		d0 0a						bne $8242				        bne _next
396			.8238		a5 e6						lda $e6					        lda ADDR_STARTH ; check end address MSB
397			.823a		c5 e8						cmp $e8					        cmp ADDR_ENDH
398			.823c		d0 04						bne $8242				        bne _next
399			.823e		20 c4 83				jsr $83c4				        jsr write_eol
400			.8241		60							rts							        rts
401			.8242																		_next:
402			.8242		e6 e5						inc $e5					        inc ADDR_STARTL ; increment start address
403			.8244		d0 02						bne $8248				        bne _cont
404			.8246		e6 e6						inc $e6					        inc ADDR_STARTH
405			.8248																		_cont:
406			.8248		c8							iny							        iny
407			.8249		c0 08						cpy #$08				        cpy #8
408			.824b		90 d5						bcc $8222				        bcc _byte
409			.824d		20 c4 83				jsr $83c4				        jsr write_eol
410			.8250		4c 16 82				jmp $8216				        jmp read_block
414			.8253																		cmd_write:
415			.8253		a5 fa						lda $fa					        lda LINE_CNT
416			.8255		c9 08						cmp #$08				        cmp #8          ; min line length = 8 ("w1000:00")
417			.8257		b0 04						bcs $825d				        bcs _cont
418			.8259																		_error:
419			.8259		20 08 83				jsr $8308				        jsr show_syntax
420			.825c		60							rts							        rts
421			.825d																		_cont:
422			.825d		a0 05						ldy #$05				        ldy #5
423			.825f		b9 00 3f				lda $3f00,y			        lda LINE_BUF,y
424			.8262		c9 3a						cmp #$3a				        cmp #':'
425			.8264		d0 f3						bne $8259				        bne _error
426			.8266		a9 01						lda #$01				        lda #1
427			.8268		85 fb						sta $fb					        sta LINE_READ
428			.826a		20 14 83				jsr $8314				        jsr read_byte
429			.826d		85 e6						sta $e6					        sta ADDR_STARTH
430			.826f		20 14 83				jsr $8314				        jsr read_byte
431			.8272		85 e5						sta $e5					        sta ADDR_STARTL
432			.8274		a9 06						lda #$06				        lda #6 ; first byte
433			.8276		85 fb						sta $fb					        sta LINE_READ
434			.8278																		_next:
435			.8278		20 14 83				jsr $8314				        jsr read_byte
436			.827b		a0 00						ldy #$00				        ldy #0
437			.827d		91 e5						sta ($e5),y			        sta (ADDR_STARTL),y
438			.827f		e6 e5						inc $e5					        inc ADDR_STARTL
439			.8281		d0 02						bne $8285				        bne _chk_end
440			.8283		e6 e6						inc $e6					        inc ADDR_STARTH
441			.8285																		_chk_end:
442			.8285		a5 fb						lda $fb					        lda LINE_READ
443			.8287		c5 fa						cmp $fa					        cmp LINE_CNT
444			.8289		90 ed						bcc $8278				        bcc _next
445			.828b		60							rts							        rts
449			.828c																		cmd_fill:
450			.828c		a5 fa						lda $fa					        lda LINE_CNT
451			.828e		c9 0d						cmp #$0d				        cmp #13
452			.8290		d0 53						bne $82e5				        bne _error
453			.8292		a0 05						ldy #$05				        ldy #5
454			.8294		b9 00 3f				lda $3f00,y			        lda LINE_BUF,y
455			.8297		c9 2d						cmp #$2d				        cmp #'-'
456			.8299		d0 4a						bne $82e5				        bne _error
457			.829b		a0 0a						ldy #$0a				        ldy #10
458			.829d		b9 00 3f				lda $3f00,y			        lda LINE_BUF,y
459			.82a0		c9 3a						cmp #$3a				        cmp #':'
460			.82a2		d0 41						bne $82e5				        bne _error
461			.82a4		a9 01						lda #$01				        lda #1
462			.82a6		85 fb						sta $fb					        sta LINE_READ
463			.82a8		20 14 83				jsr $8314				        jsr read_byte
464			.82ab		85 e6						sta $e6					        sta ADDR_STARTH
465			.82ad		20 14 83				jsr $8314				        jsr read_byte
466			.82b0		85 e5						sta $e5					        sta ADDR_STARTL
467			.82b2		a9 06						lda #$06				        lda #6
468			.82b4		85 fb						sta $fb					        sta LINE_READ
469			.82b6		20 14 83				jsr $8314				        jsr read_byte
470			.82b9		85 e8						sta $e8					        sta ADDR_ENDH
471			.82bb		20 14 83				jsr $8314				        jsr read_byte
472			.82be		85 e7						sta $e7					        sta ADDR_ENDL
473			.82c0		a9 0b						lda #$0b				        lda #11
474			.82c2		85 fb						sta $fb					        sta LINE_READ
475			.82c4		20 14 83				jsr $8314				        jsr read_byte
476			.82c7		85 e0						sta $e0					        sta TEMP
477			.82c9																		_next:
478			.82c9		a0 00						ldy #$00				        ldy #0
479			.82cb		a5 e0						lda $e0					        lda TEMP
480			.82cd		91 e5						sta ($e5),y			        sta (ADDR_STARTL),y
481			.82cf		a5 e5						lda $e5					        lda ADDR_STARTL ; check end address LSB
482			.82d1		c5 e7						cmp $e7					        cmp ADDR_ENDL
483			.82d3		d0 07						bne $82dc				        bne _incr
484			.82d5		a5 e6						lda $e6					        lda ADDR_STARTH ; check end address MSB
485			.82d7		c5 e8						cmp $e8					        cmp ADDR_ENDH
486			.82d9		d0 01						bne $82dc				        bne _incr
487			.82db		60							rts							        rts
488			.82dc																		_incr:
489			.82dc		e6 e5						inc $e5					        inc ADDR_STARTL ; increment start address
490			.82de		d0 02						bne $82e2				        bne _cont
491			.82e0		e6 e6						inc $e6					        inc ADDR_STARTH
492			.82e2																		_cont:
493			.82e2		4c c9 82				jmp $82c9				        jmp _next
494			.82e5																		_error:
495			.82e5		20 08 83				jsr $8308				        jsr show_syntax
496			.82e8		60							rts							        rts
500			.82e9																		cmd_go:
501			.82e9		a5 fa						lda $fa					        lda LINE_CNT
502			.82eb		c9 05						cmp #$05				        cmp #5
503			.82ed		d0 12						bne $8301				        bne _error
504			.82ef		a9 01						lda #$01				        lda #1
505			.82f1		85 fb						sta $fb					        sta LINE_READ
506			.82f3		20 14 83				jsr $8314				        jsr read_byte
507			.82f6		85 e6						sta $e6					        sta ADDR_STARTH
508			.82f8		20 14 83				jsr $8314				        jsr read_byte
509			.82fb		85 e5						sta $e5					        sta ADDR_STARTL
510			.82fd		20 05 83				jsr $8305				        jsr _jsr
511			.8300		60							rts							        rts
512			.8301																		_error:
513			.8301		20 08 83				jsr $8308				        jsr show_syntax
514			.8304		60							rts							        rts
515			.8305		6c e5 00				jmp ($00e5)			_jsr    jmp  (ADDR_STARTL)
517			.8308																		show_syntax:
518			.8308		a9 fb						lda #$fb				        lda #<MSG_SYNTAX
519			.830a		85 e3						sta $e3					        sta MSGL
520			.830c		a9 84						lda #$84				        lda #>MSG_SYNTAX
521			.830e		85 e4						sta $e4					        sta MSGH
522			.8310		20 b7 83				jsr $83b7				        jsr write_msg
523			.8313		60							rts							        rts
527			.8314																		read_byte:
528			.8314		84 e2						sty $e2					        sty TEMP_Y
529			.8316		a4 fb						ldy $fb					        ldy LINE_READ
530			.8318		b9 00 3f				lda $3f00,y			        lda LINE_BUF,y
531			.831b		c8							iny							        iny
532			.831c		be 00 3f				ldx $3f00,y			        ldx LINE_BUF,y
533			.831f		c8							iny							        iny
534			.8320		84 fb						sty $fb					        sty LINE_READ
535			.8322		20 68 83				jsr $8368				        jsr bytetobin
536			.8325		a4 e2						ldy $e2					        ldy TEMP_Y
537			.8327		60							rts							        rts
542			.8328																		write_nibble:
543			.8328		29 0f						and #$0f				        and #$0f
544			.832a		c9 0a						cmp #$0a				        cmp #10
545			.832c		90 07						bcc $8335				        bcc _digit
546			.832e		18							clc							        clc
547			.832f		69 57						adc #$57				        adc #'a'-10
548			.8331		20 83 83				jsr $8383				        jsr serial_out
549			.8334		60							rts							        rts
550			.8335																		_digit:
551			.8335		18							clc							        clc
552			.8336		69 30						adc #$30				        adc #'0'
553			.8338		20 83 83				jsr $8383				        jsr serial_out
554			.833b		60							rts							        rts
558			.833c																		write_byte:
559			.833c		aa							tax							        tax
560			.833d		4a							lsr a						        lsr
561			.833e		4a							lsr a						        lsr
562			.833f		4a							lsr a						        lsr
563			.8340		4a							lsr a						        lsr
564			.8341		20 28 83				jsr $8328				        jsr write_nibble ; write upper nibble
565			.8344		8a							txa							        txa
566			.8345		29 0f						and #$0f				        and #$0f
567			.8347		20 28 83				jsr $8328				        jsr write_nibble ; write lower nibble
568			.834a		60							rts							        rts
574			.834b																		hextobin:
575			.834b		c9 41						cmp #$41				        cmp #'A'
576			.834d		b0 06						bcs $8355				        bcs _alpha ; char >= 'A'
577			.834f		38							sec							        sec ; else assume char is decimal digit
578			.8350		e9 30						sbc #$30				        sbc #'0'
579			.8352		29 0f						and #$0f				        and #$0f
580			.8354		60							rts							        rts
581			.8355																		_alpha:
582			.8355		09 20						ora #$20				        ora  #%00100000 ; convert to lower case
583			.8357		38							sec							        sec
584			.8358		e9 57						sbc #$57				        sbc #'a'-10
585			.835a		29 0f						and #$0f				        and #$0f
586			.835c		60							rts							        rts
591			.835d																		tolower:
592			.835d		c9 41						cmp #$41				        cmp #'A'
593			.835f		90 06						bcc $8367				        bcc _not_upper
594			.8361		c9 5a						cmp #$5a				        cmp #'Z'
595			.8363		b0 02						bcs $8367				        bcs _not_upper
596			.8365		09 20						ora #$20				        ora  #%00100000 ; set bit 5 (A=$41, a=$61)
597			.8367																		_not_upper:
598			.8367		60							rts							        rts
604			.8368																		bytetobin:
605			.8368		20 4b 83				jsr $834b				        jsr hextobin
606			.836b		0a							asl a						        asl
607			.836c		0a							asl a						        asl
608			.836d		0a							asl a						        asl
609			.836e		0a							asl a						        asl
610			.836f		85 e0						sta $e0					        sta TEMP        ; store upper nibble
611			.8371		8a							txa							        txa
612			.8372		20 4b 83				jsr $834b				        jsr hextobin ; (does change TEMP)
613			.8375		05 e0						ora $e0					        ora TEMP
614			.8377		60							rts							        rts
617			.8378																		serial_init:
618			.8378		a9 10						lda #$10				        lda #%00010000 ; 1 stop bit, 8 data bits, 115200bps, internal clock
619			.837a		8d 23 7f				sta $7f23				        sta ACIA_CTL
620			.837d		a9 0b						lda #$0b				        lda #%00001011  ; no parity, no echo, no TX interrupts, /RTS=low, no RX interrupts, /DTR=low
621			.837f		8d 22 7f				sta $7f22				        sta ACIA_CMD
622			.8382		60							rts							        rts
627			.8383																		serial_out:
628			.8383		8d 20 7f				sta $7f20				        sta ACIA_DATA
629			.8386		20 a7 83				jsr $83a7				        jsr wait100us   ; 115200bps -> 87us/character
630			.8389		60							rts							        rts
635			.838a																		serial_out_no_wait:
636			.838a		8d 20 7f				sta $7f20				        sta ACIA_DATA
637			.838d		60							rts							        rts
642			.838e																		serial_in:
643			.838e		ad 21 7f				lda $7f21				        lda  ACIA_STATUS
644			.8391		29 08						and #$08				        and #%00001000  ; bit3 = Receiver Data Register Full
645			.8393		f0 05						beq $839a				        beq _empty
646			.8395		ad 20 7f				lda $7f20				        lda ACIA_DATA
647			.8398		38							sec							        sec
648			.8399		60							rts							        rts
649			.839a																		_empty:
650			.839a		18							clc							        clc
651			.839b		60							rts							        rts
656			.839c																		serial_wait:
657			.839c		20 8e 83				jsr $838e				        jsr serial_in
658			.839f		90 fb						bcc $839c				        bcc serial_wait
659			.83a1		60							rts							        rts
662			.83a2																		wait20clk:
663			.83a2		ea							nop							        nop ; CYC=2
664			.83a3		ea							nop							        nop ; CYC=2
665			.83a4		ea							nop							        nop ; CYC=2
666			.83a5		ea							nop							        nop ; CYC=2
667			.83a6		60							rts							        rts ; CYC=12 (jsr+rts)
671			.83a7																		wait100us:
672			.83a7		84 e0						sty $e0					        sty TEMP           ; CYC=3
673			.83a9		a0 03						ldy #$03				        ldy #4*CLOCK_MHZ-1 ; CYC=2
674			.83ab																		_loop:
675			.83ab		20 a2 83				jsr $83a2				        jsr wait20clk ; (does change TEMP)
676			.83ae		88							dey							        dey       ; CYC=2
677			.83af		d0 fa						bne $83ab				        bne _loop ; CYC=3
678			.83b1		ea							nop							        nop       ; CYC=2
679			.83b2		ea							nop							        nop       ; CYC=2
680			.83b3		ea							nop							        nop       ; CYC=2
681			.83b4		a4 e0						ldy $e0					        ldy TEMP  ; CYC=4
682			.83b6		60							rts							        rts       ; CYC=12 (jsr+rts)
684			.83b7																		write_msg:
685			.83b7		a0 00						ldy #$00				        ldy #$0
686			.83b9																		_loop:
687			.83b9		b1 e3						lda ($e3),y			        lda (MSGL),y
688			.83bb		f0 06						beq $83c3				        beq _done
689			.83bd		20 83 83				jsr $8383				        jsr serial_out
690			.83c0		c8							iny							        iny
691			.83c1		d0 f6						bne $83b9				        bne _loop
692			.83c3																		_done:
693			.83c3		60							rts							        rts
695			.83c4																		write_eol:
696			.83c4		a9 0d						lda #$0d				        lda #CR
697			.83c6		20 83 83				jsr $8383				        jsr serial_out
698			.83c9		a9 0a						lda #$0a				        lda #LF
699			.83cb		20 83 83				jsr $8383				        jsr serial_out
700			.83ce		60							rts							        rts
702			.83cf																		nmi:
703			.83cf		40							rti							        rti
705			.83d0																		irq:
706			.83d0		40							rti							        rti
708			>83d1		4d 6f 6e 69 74 6f 72 20					MSG_WELCOME:   .text "Monitor 1.1", CR, LF, 0
				>83d9		31 2e 31 0d 0a 00
709			>83df		75 6e 6b 6e 6f 77 6e 20					MSG_UNK_CMD:   .text "unknown command", CR, LF, 0
				>83e7		63 6f 6d 6d 61 6e 64 0d 0a 00
710			>83f1		78 6d 6f 64 65 6d 20 73					MSG_XM_START:  .text "xmodem started", CR, LF, 0
				>83f9		74 61 72 74 65 64 0d 0a 00
711			>8402		78 6d 6f 64 65 6d 20 61					MSG_XM_ABORT:  .text "xmodem aborted", CR, LF, 0
				>840a		62 6f 72 74 65 64 0d 0a 00
712			>8413		6c 69 6e 65 20 62 75 66					MSG_OVERFLOW:  .text "line buffer overlfow", CR, LF, 0
				>841b		66 65 72 20 6f 76 65 72 6c 66 6f 77 0d 0a 00
713			>842a		3f 20 20 20 20 20 20 20					MSG_HELP:      .text "?              show help", CR, LF
				>8432		20 20 20 20 20 20 20 73 68 6f 77 20 68 65 6c 70
				>8442		0d 0a
714			>8444		78 31 30 30 30 20 20 20					               .text "x1000          xmodem transfer", CR, LF
				>844c		20 20 20 20 20 20 20 78 6d 6f 64 65 6d 20 74 72
				>845c		61 6e 73 66 65 72 0d 0a
715			>8464		72 31 30 30 30 20 20 20					               .text "r1000          read memory line", CR, LF
				>846c		20 20 20 20 20 20 20 72 65 61 64 20 6d 65 6d 6f
				>847c		72 79 20 6c 69 6e 65 0d 0a
716			>8485		72 31 30 30 30 2d 31 30					               .text "r1000-101f     read memory block", CR, LF
				>848d		31 66 20 20 20 20 20 72 65 61 64 20 6d 65 6d 6f
				>849d		72 79 20 62 6c 6f 63 6b 0d 0a
717			>84a7		77 31 30 30 30 3a 30 30					               .text "w1000:0011aabb write block", CR, LF
				>84af		31 31 61 61 62 62 20 77 72 69 74 65 20 62 6c 6f
				>84bf		63 6b 0d 0a
718			>84c3		66 31 30 30 30 2d 31 30					               .text "f1000-1010:ea  fill block", CR, LF
				>84cb		31 30 3a 65 61 20 20 66 69 6c 6c 20 62 6c 6f 63
				>84db		6b 0d 0a
719			>84de		67 31 30 30 30 20 20 20					               .text "g1000          run program", CR, LF, 0
				>84e6		20 20 20 20 20 20 20 72 75 6e 20 70 72 6f 67 72
				>84f6		61 6d 0d 0a 00
720			>84fb		73 79 6e 74 61 78 20 65					MSG_SYNTAX:    .text "syntax error", CR, LF, 0
				>8503		72 72 6f 72 0d 0a 00
723			>fffa		cf 83														        .word nmi       ; NMI
724			>fffc		00 80														        .word reset     ; RESET
725			>fffe		d0 83														        .word irq       ; IRQ/BRK

;******  End of listing
