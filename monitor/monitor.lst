
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass.exe --m65c02 --nostart --tab-size 2 --line-numbers --list s:\work\github\6502-cent1\monitor\monitor.lst --output s:\work\github\6502-cent1\monitor\monitor.bin s:\work\github\6502-cent1\monitor\monitor.asm
; Fri Dec 24 13:53:03 2021

;Line		;Offset	;Hex						;Monitor				;Source

:1			;******  Processing input file: s:\work\github\6502-cent1\monitor\monitor.asm

4				=1																			CLOCK_MHZ   = 1         ; // clock frequency in MHz
7				=$7f20																	ACIA_BASE   = $7f20
8				=32544																	ACIA_DATA   = ACIA_BASE + 0
9				=32545																	ACIA_STATUS = ACIA_BASE + 1
10			=32546																	ACIA_CMD    = ACIA_BASE + 2
11			=32547																	ACIA_CTL    = ACIA_BASE + 3
13			=">"																		PROMPT      = '>'
14			=$0d																		CR          = $0d
15			=$0a																		LF          = $0a
16			=$08																		BS          = $08
17			=82																			BUF_LEN     = 82
21			>00a0																		TEMP        .byte ?     ; general purpose byte, always assume that subroutines will change this
22			>00a1																		MSGL        .byte ?     ; message address LSB
23			>00a2																		MSGH        .byte ?     ; message address MSB
24			>00a3																		LD_CHECKSUM .byte ?
25			>00a4																		LD_ADDRESSL .byte ?
26			>00a5																		LD_ADDRESSH .byte ?
27			>00a6																		ADDR_STARTL .byte ?
28			>00a7																		ADDR_STARTH .byte ?
29			>00a8																		ADDR_ENDL   .byte ?
30			>00a9																		ADDR_ENDH   .byte ?
31			>00aa																		LINE_CNT    .byte ?
32			>00ab																		LINE_BUF    .fill BUF_LEN
33			.00fd																		LINE_BUFEND
36			.8000																		reset:
37			.8000		d8							cld							        cld             ; clear decimal mode
38			.8001		20 2f 83				jsr $832f				        jsr wait100us
39			.8004		20 fd 82				jsr $82fd				        jsr serial_init
40			.8007		a9 5c						lda #$5c				        lda #<MSG_WELCOME
41			.8009		85 a1						sta $a1					        sta MSGL
42			.800b		a9 83						lda #$83				        lda #>MSG_WELCOME
43			.800d		85 a2						sta $a2					        sta MSGH
44			.800f		20 3f 83				jsr $833f				        jsr write_msg
46			.8012																		ready:
47			.8012		a9 00						lda #$00				        lda #0
48			.8014		85 aa						sta $aa					        sta LINE_CNT
49			.8016		a9 3e						lda #$3e				        lda #PROMPT
50			.8018		20 08 83				jsr $8308				        jsr serial_out  ; show prompt
52			.801b																		read_char:
53			.801b		20 24 83				jsr $8324				        jsr serial_wait
54			.801e		20 08 83				jsr $8308				        jsr serial_out  ; echo
55			.8021		20 e2 82				jsr $82e2				        jsr tolower     ; convert to lower case
56			.8024		c9 0a						cmp #$0a				        cmp #LF
57			.8026		f0 f3						beq $801b				        beq read_char   ; ignore line feed
58			.8028		c9 0d						cmp #$0d				        cmp #CR
59			.802a		f0 22						beq $804e				        beq newline
60			.802c		a4 aa						ldy $aa					        ldy LINE_CNT
61			.802e		c9 08						cmp #$08				        cmp #BS
62			.8030		d0 0f						bne $8041				        bne _store_char
63			.8032		88							dey							        dey             ; remove last char from buffer
64			.8033		30 05						bmi $803a				        bmi _reset
65			.8035		84 aa						sty $aa					        sty LINE_CNT
66			.8037		4c 1b 80				jmp $801b				        jmp read_char
68			.803a		a0 00						ldy #$00				_reset: ldy #0          ; beyond start
69			.803c		84 aa						sty $aa					        sty LINE_CNT
70			.803e		4c 1b 80				jmp $801b				        jmp read_char
72			.8041																		_store_char:
73			.8041		c0 51						cpy #$51				        cpy #BUF_LEN - 1
74			.8043		b0 5c						bcs $80a1				        bcs overflow
75			.8045		99 ab 00				sta $00ab,y			        sta LINE_BUF,y
76			.8048		c8							iny							        iny
77			.8049		84 aa						sty $aa					        sty LINE_CNT
78			.804b		4c 1b 80				jmp $801b				        jmp read_char
80			.804e																		newline:
81			.804e		20 4f 83				jsr $834f				        jsr write_eol
82			.8051		a5 aa						lda $aa					        lda LINE_CNT
83			.8053		f0 bd						beq $8012				        beq ready       ; ignore emty lines
84			.8055		a5 ab						lda $ab					        lda LINE_BUF
85			.8057		c9 3f						cmp #$3f				        cmp #'?'        ; command "?": help
86			.8059		d0 06						bne $8061				        bne _chk_l
87			.805b		20 af 80				jsr $80af				        jsr cmd_help
88			.805e		4c 12 80				jmp $8012				        jmp ready
89			.8061																		_chk_l:
90			.8061		c9 6c						cmp #$6c				        cmp #'l'        ; command "l": download
91			.8063		d0 06						bne $806b				        bne _chk_r
92			.8065		20 bb 80				jsr $80bb				        jsr cmd_download
93			.8068		4c 12 80				jmp $8012				        jmp ready
94			.806b																		_chk_r:
95			.806b		c9 72						cmp #$72				        cmp #'r'        ; command "r": read memory
96			.806d		d0 06						bne $8075				        bne _chk_w
97			.806f		20 3d 81				jsr $813d				        jsr cmd_read
98			.8072		4c 12 80				jmp $8012				        jmp ready
99			.8075																		_chk_w:
100			.8075		c9 77						cmp #$77				        cmp #'w'        ; command "w": write memory
101			.8077		d0 06						bne $807f				        bne _chk_f
102			.8079		20 da 81				jsr $81da				        jsr cmd_write
103			.807c		4c 12 80				jmp $8012				        jmp ready
104			.807f																		_chk_f:
105			.807f		c9 66						cmp #$66				        cmp #'f'        ; command "f": fill memory
106			.8081		d0 06						bne $8089				        bne _chk_g
107			.8083		20 15 82				jsr $8215				        jsr cmd_fill
108			.8086		4c 12 80				jmp $8012				        jmp ready
110			.8089																		_chk_g:
111			.8089		c9 67						cmp #$67				        cmp #'g'        ; command "g": run program
112			.808b		d0 06						bne $8093				        bne unknown
113			.808d		20 6d 82				jsr $826d				        jsr cmd_go
114			.8090		4c 12 80				jmp $8012				        jmp ready
116			.8093																		unknown:
117			.8093		a9 6c						lda #$6c				        lda #<MSG_UNK_CMD
118			.8095		85 a1						sta $a1					        sta MSGL
119			.8097		a9 83						lda #$83				        lda #>MSG_UNK_CMD
120			.8099		85 a2						sta $a2					        sta MSGH
121			.809b		20 3f 83				jsr $833f				        jsr write_msg
122			.809e		4c 12 80				jmp $8012				        jmp ready
124			.80a1																		overflow:
125			.80a1		a9 e4						lda #$e4				        lda #<MSG_OVERFLOW
126			.80a3		85 a1						sta $a1					        sta MSGL
127			.80a5		a9 83						lda #$83				        lda #>MSG_OVERFLOW
128			.80a7		85 a2						sta $a2					        sta MSGH
129			.80a9		20 3f 83				jsr $833f				        jsr write_msg
130			.80ac		4c 12 80				jmp $8012				        jmp ready
132			.80af																		cmd_help:
133			.80af		a9 fb						lda #$fb				        lda #<MSG_HELP
134			.80b1		85 a1						sta $a1					        sta MSGL
135			.80b3		a9 83						lda #$83				        lda #>MSG_HELP
136			.80b5		85 a2						sta $a2					        sta MSGH
137			.80b7		20 3f 83				jsr $833f				        jsr write_msg
138			.80ba		60							rts							        rts
145			.80bb																		cmd_download:
146			.80bb		a9 7e						lda #$7e				        lda #<MSG_DL_START
147			.80bd		85 a1						sta $a1					        sta MSGL
148			.80bf		a9 83						lda #$83				        lda #>MSG_DL_START
149			.80c1		85 a2						sta $a2					        sta MSGH
150			.80c3		20 3f 83				jsr $833f				        jsr write_msg
152			.80c6																		_read_start:
153			.80c6		20 24 83				jsr $8324				        jsr serial_wait
154			.80c9		c9 1b						cmp #$1b				        cmp #$1b ; ESC
155			.80cb		f0 64						beq $8131				        beq _err_abort
156			.80cd		c9 3a						cmp #$3a				        cmp #':'
157			.80cf		d0 f5						bne $80c6				        bne _read_start
159			.80d1		a9 00						lda #$00				        lda #$00
160			.80d3		85 a3						sta $a3					        sta LD_CHECKSUM ; reset checksum
161			.80d5																		_next:
162			.80d5		20 b2 82				jsr $82b2				        jsr read_hex    ; read byte count
163			.80d8		aa							tax							        tax             ; x -> byte count
164			.80d9		20 b2 82				jsr $82b2				        jsr read_hex    ; read address MSB
165			.80dc		85 a5						sta $a5					        sta LD_ADDRESSH
166			.80de		20 b2 82				jsr $82b2				        jsr read_hex    ; read address LSB
167			.80e1		85 a4						sta $a4					        sta LD_ADDRESSL
168			.80e3		20 b2 82				jsr $82b2				        jsr read_hex    ; read record type
169			.80e6		f0 17						beq $80ff				        beq _data       ; 0 -> data
170			.80e8		c9 01						cmp #$01				        cmp #$01        ; 1 -> eof
171			.80ea		d0 2d						bne $8119				        bne _err_unk
172			.80ec																		_eof:
173			.80ec		20 b2 82				jsr $82b2				        jsr read_hex    ; read checksum
174			.80ef		a5 a3						lda $a3					        lda LD_CHECKSUM
175			.80f1		d0 32						bne $8125				        bne _err_cks    ; checksum must be 0
177			.80f3		a9 91						lda #$91				        lda #<MSG_DL_END
178			.80f5		85 a1						sta $a1					        sta MSGL
179			.80f7		a9 83						lda #$83				        lda #>MSG_DL_END
180			.80f9		85 a2						sta $a2					        sta MSGH
181			.80fb		20 3f 83				jsr $833f				        jsr write_msg
183			.80fe		60							rts							        rts
184			.80ff																		_data:
185			.80ff		a0 00						ldy #$00				        ldy #0          ; x -> byte index
186			.8101																		_read_byte:
187			.8101		20 b2 82				jsr $82b2				        jsr read_hex    ; read data byte
188			.8104		91 a4						sta ($a4),y			        sta (LD_ADDRESSL),y
189			.8106		c8							iny							        iny
190			.8107		ca							dex							        dex             ; decrement byte count
191			.8108		d0 f7						bne $8101				        bne _read_byte
192			.810a		20 b2 82				jsr $82b2				        jsr read_hex    ; read checksum
193			.810d		a5 a3						lda $a3					        lda LD_CHECKSUM
194			.810f		d0 14						bne $8125				        bne _err_cks    ; checksum must be 0
195			.8111		a9 2e						lda #$2e				        lda #'.'        ; send '.' as acknowledgmenet
196			.8113		20 0f 83				jsr $830f				        jsr serial_out_no_wait
197			.8116		4c c6 80				jmp $80c6				        jmp _read_start;
199			.8119																		_err_unk:
200			.8119		a9 bd						lda #$bd				        lda #<MSG_UNK_REC
201			.811b		85 a1						sta $a1					        sta MSGL
202			.811d		a9 83						lda #$83				        lda #>MSG_UNK_REC
203			.811f		85 a2						sta $a2					        sta MSGH
204			.8121		20 3f 83				jsr $833f				        jsr write_msg
205			.8124		60							rts							        rts
207			.8125																		_err_cks:
208			.8125		a9 d3						lda #$d3				        lda #<MSG_CKS_ERR
209			.8127		85 a1						sta $a1					        sta MSGL
210			.8129		a9 83						lda #$83				        lda #>MSG_CKS_ERR
211			.812b		85 a2						sta $a2					        sta MSGH
212			.812d		20 3f 83				jsr $833f				        jsr write_msg
213			.8130		60							rts							        rts
215			.8131																		_err_abort:
216			.8131		a9 a8						lda #$a8				        lda #<MSG_DL_ABORT
217			.8133		85 a1						sta $a1					        sta MSGL
218			.8135		a9 83						lda #$83				        lda #>MSG_DL_ABORT
219			.8137		85 a2						sta $a2					        sta MSGH
220			.8139		20 3f 83				jsr $833f				        jsr write_msg
221			.813c		60							rts							        rts
227			.813d																		cmd_read:
228			.813d		a5 aa						lda $aa					        lda LINE_CNT
229			.813f		c9 05						cmp #$05				        cmp #5
230			.8141		f0 08						beq $814b				        beq _line
231			.8143		c9 0a						cmp #$0a				        cmp #10
232			.8145		f0 29						beq $8170				        beq _block
233			.8147		20 83 82				jsr $8283				        jsr show_syntax
234			.814a		60							rts							        rts
236			.814b																		_line:
237			.814b		a0 01						ldy #$01				        ldy #1
238			.814d		20 86 81				jsr $8186				        jsr read_addr
239			.8150		85 a7						sta $a7					        sta ADDR_STARTH
240			.8152		86 a6						stx $a6					        stx ADDR_STARTL
241			.8154		8a							txa							        txa
242			.8155		18							clc							        clc             ; end address = start address + 8
243			.8156		69 07						adc #$07				        adc #7
244			.8158		85 a8						sta $a8					        sta ADDR_ENDL
245			.815a		a5 a7						lda $a7					        lda ADDR_STARTH
246			.815c		69 00						adc #$00				        adc #0
247			.815e		85 a9						sta $a9					        sta ADDR_ENDH
248			.8160		b0 04						bcs $8166				        bcs _overflow
249			.8162		20 9d 81				jsr $819d				        jsr read_block
250			.8165		60							rts							        rts
252			.8166																		_overflow:
253			.8166		a9 ff						lda #$ff				        lda #$ff
254			.8168		85 a8						sta $a8					        sta ADDR_ENDL
255			.816a		85 a9						sta $a9					        sta ADDR_ENDH
256			.816c		20 9d 81				jsr $819d				        jsr read_block
257			.816f		60							rts							        rts
259			.8170																		_block:
260			.8170		a0 01						ldy #$01				        ldy #1
261			.8172		20 86 81				jsr $8186				        jsr read_addr
262			.8175		85 a7						sta $a7					        sta ADDR_STARTH
263			.8177		86 a6						stx $a6					        stx ADDR_STARTL
264			.8179		a0 06						ldy #$06				        ldy #6
265			.817b		20 86 81				jsr $8186				        jsr read_addr
266			.817e		85 a9						sta $a9					        sta ADDR_ENDH
267			.8180		86 a8						stx $a8					        stx ADDR_ENDL
268			.8182		20 9d 81				jsr $819d				        jsr read_block
269			.8185		60							rts							        rts
275			.8186																		read_addr:
276			.8186		b9 ab 00				lda $00ab,y			        lda LINE_BUF,y
277			.8189		c8							iny							        iny
278			.818a		b6 ab						ldx $ab,y				        ldx LINE_BUF,y
279			.818c		c8							iny							        iny
280			.818d		20 ed 82				jsr $82ed				        jsr bytetobin
281			.8190		48							pha							        pha
282			.8191		b9 ab 00				lda $00ab,y			        lda LINE_BUF,y
283			.8194		c8							iny							        iny
284			.8195		b6 ab						ldx $ab,y				        ldx LINE_BUF,y
285			.8197		20 ed 82				jsr $82ed				        jsr bytetobin
286			.819a		aa							tax							        tax
287			.819b		68							pla							        pla
288			.819c		60							rts							        rts
291			.819d																		read_block:
292			.819d		a5 a7						lda $a7					        lda ADDR_STARTH
293			.819f		20 a3 82				jsr $82a3				        jsr write_byte
294			.81a2		a5 a6						lda $a6					        lda ADDR_STARTL
295			.81a4		20 a3 82				jsr $82a3				        jsr write_byte
296			.81a7		a0 00						ldy #$00				        ldy #0
297			.81a9																		_byte:
298			.81a9		a9 20						lda #$20				        lda #' '
299			.81ab		20 08 83				jsr $8308				        jsr serial_out
300			.81ae		84 a0						sty $a0					        sty TEMP
301			.81b0		a0 00						ldy #$00				        ldy #0
302			.81b2		b1 a6						lda ($a6),y			        lda (ADDR_STARTL),y
303			.81b4		a4 a0						ldy $a0					        ldy TEMP
304			.81b6		20 a3 82				jsr $82a3				        jsr write_byte
305			.81b9		a5 a6						lda $a6					        lda ADDR_STARTL ; check end address LSB
306			.81bb		c5 a8						cmp $a8					        cmp ADDR_ENDL
307			.81bd		d0 0a						bne $81c9				        bne _next
308			.81bf		a5 a7						lda $a7					        lda ADDR_STARTH ; check end address MSB
309			.81c1		c5 a9						cmp $a9					        cmp ADDR_ENDH
310			.81c3		d0 04						bne $81c9				        bne _next
311			.81c5		20 4f 83				jsr $834f				        jsr write_eol
312			.81c8		60							rts							        rts
313			.81c9																		_next:
314			.81c9		e6 a6						inc $a6					        inc ADDR_STARTL ; increment start address
315			.81cb		d0 02						bne $81cf				        bne _cont
316			.81cd		e6 a7						inc $a7					        inc ADDR_STARTH
317			.81cf																		_cont:
318			.81cf		c8							iny							        iny
319			.81d0		c0 08						cpy #$08				        cpy #8
320			.81d2		90 d5						bcc $81a9				        bcc _byte
321			.81d4		20 4f 83				jsr $834f				        jsr write_eol
322			.81d7		4c 9d 81				jmp $819d				        jmp read_block
326			.81da																		cmd_write:
327			.81da		a5 aa						lda $aa					        lda LINE_CNT
328			.81dc		c9 08						cmp #$08				        cmp #8          ; min line length = 8 ("w1000:00")
329			.81de		b0 04						bcs $81e4				        bcs _cont
330			.81e0																		_error:
331			.81e0		20 83 82				jsr $8283				        jsr show_syntax
332			.81e3		60							rts							        rts
333			.81e4																		_cont:
334			.81e4		a0 05						ldy #$05				        ldy #5
335			.81e6		b9 ab 00				lda $00ab,y			        lda LINE_BUF,y
336			.81e9		c9 3a						cmp #$3a				        cmp #':'
337			.81eb		d0 f3						bne $81e0				        bne _error
338			.81ed		a0 01						ldy #$01				        ldy #1
339			.81ef		20 86 81				jsr $8186				        jsr read_addr
340			.81f2		85 a7						sta $a7					        sta ADDR_STARTH
341			.81f4		86 a6						stx $a6					        stx ADDR_STARTL
342			.81f6		a0 06						ldy #$06				        ldy #6 ; first byte
343			.81f8																		_next:
344			.81f8		b9 ab 00				lda $00ab,y			        lda LINE_BUF,y
345			.81fb		c8							iny							        iny
346			.81fc		b6 ab						ldx $ab,y				        ldx LINE_BUF,y
347			.81fe		c8							iny							        iny
348			.81ff		20 ed 82				jsr $82ed				        jsr bytetobin
349			.8202		84 a0						sty $a0					        sty TEMP
350			.8204		a0 00						ldy #$00				        ldy #0
351			.8206		91 a6						sta ($a6),y			        sta (ADDR_STARTL),y
352			.8208		a4 a0						ldy $a0					        ldy TEMP
353			.820a		e6 a6						inc $a6					        inc ADDR_STARTL
354			.820c		d0 02						bne $8210				        bne _chk_end
355			.820e		e6 a7						inc $a7					        inc ADDR_STARTH
356			.8210																		_chk_end:
357			.8210		c4 aa						cpy $aa					        cpy LINE_CNT
358			.8212		90 e4						bcc $81f8				        bcc _next
359			.8214		60							rts							        rts
363			.8215																		cmd_fill:
364			.8215		a5 aa						lda $aa					        lda LINE_CNT
365			.8217		c9 0d						cmp #$0d				        cmp #13
366			.8219		d0 4e						bne $8269				        bne _error
367			.821b		a0 05						ldy #$05				        ldy #5
368			.821d		b9 ab 00				lda $00ab,y			        lda LINE_BUF,y
369			.8220		c9 2d						cmp #$2d				        cmp #'-'
370			.8222		d0 45						bne $8269				        bne _error
371			.8224		a0 0a						ldy #$0a				        ldy #10
372			.8226		b9 ab 00				lda $00ab,y			        lda LINE_BUF,y
373			.8229		c9 3a						cmp #$3a				        cmp #':'
374			.822b		d0 3c						bne $8269				        bne _error
375			.822d		a0 01						ldy #$01				        ldy #1
376			.822f		20 86 81				jsr $8186				        jsr read_addr
377			.8232		85 a7						sta $a7					        sta ADDR_STARTH
378			.8234		86 a6						stx $a6					        stx ADDR_STARTL
379			.8236		a0 06						ldy #$06				        ldy #6
380			.8238		20 86 81				jsr $8186				        jsr read_addr
381			.823b		85 a9						sta $a9					        sta ADDR_ENDH
382			.823d		86 a8						stx $a8					        stx ADDR_ENDL
383			.823f		a0 0b						ldy #$0b				        ldy #11
384			.8241		b9 ab 00				lda $00ab,y			        lda LINE_BUF,y
385			.8244		c8							iny							        iny
386			.8245		b6 ab						ldx $ab,y				        ldx LINE_BUF,y
387			.8247		c8							iny							        iny
388			.8248		20 ed 82				jsr $82ed				        jsr bytetobin
389			.824b		85 a0						sta $a0					        sta TEMP
390			.824d																		_next:
391			.824d		a0 00						ldy #$00				        ldy #0
392			.824f		a5 a0						lda $a0					        lda TEMP
393			.8251		91 a6						sta ($a6),y			        sta (ADDR_STARTL),y
394			.8253		a5 a6						lda $a6					        lda ADDR_STARTL ; check end address LSB
395			.8255		c5 a8						cmp $a8					        cmp ADDR_ENDL
396			.8257		d0 07						bne $8260				        bne _incr
397			.8259		a5 a7						lda $a7					        lda ADDR_STARTH ; check end address MSB
398			.825b		c5 a9						cmp $a9					        cmp ADDR_ENDH
399			.825d		d0 01						bne $8260				        bne _incr
400			.825f		60							rts							        rts
401			.8260																		_incr:
402			.8260		e6 a6						inc $a6					        inc ADDR_STARTL ; increment start address
403			.8262		d0 02						bne $8266				        bne _cont
404			.8264		e6 a7						inc $a7					        inc ADDR_STARTH
405			.8266																		_cont:
406			.8266		4c 4d 82				jmp $824d				        jmp _next
407			.8269																		_error:
408			.8269		20 83 82				jsr $8283				        jsr show_syntax
409			.826c		60							rts							        rts
413			.826d																		cmd_go:
414			.826d		a5 aa						lda $aa					        lda LINE_CNT
415			.826f		c9 05						cmp #$05				        cmp #5
416			.8271		d0 0c						bne $827f				        bne _error
417			.8273		a0 01						ldy #$01				        ldy #1
418			.8275		20 86 81				jsr $8186				        jsr read_addr
419			.8278		85 a7						sta $a7					        sta ADDR_STARTH
420			.827a		86 a6						stx $a6					        stx ADDR_STARTL
421			.827c		6c a6 00				jmp ($00a6)			        jmp (ADDR_STARTL)
422			.827f																		_error:
423			.827f		20 83 82				jsr $8283				        jsr show_syntax
424			.8282		60							rts							        rts
426			.8283																		show_syntax:
427			.8283		a9 d3						lda #$d3				        lda #<MSG_SYNTAX
428			.8285		85 a1						sta $a1					        sta MSGL
429			.8287		a9 84						lda #$84				        lda #>MSG_SYNTAX
430			.8289		85 a2						sta $a2					        sta MSGH
431			.828b		20 3f 83				jsr $833f				        jsr write_msg
432			.828e		60							rts							        rts
436			.828f																		write_nibble:
437			.828f		29 0f						and #$0f				        and #$0f
438			.8291		c9 0a						cmp #$0a				        cmp #10
439			.8293		90 07						bcc $829c				        bcc _digit
440			.8295		18							clc							        clc
441			.8296		69 57						adc #$57				        adc #'a'-10
442			.8298		20 08 83				jsr $8308				        jsr serial_out
443			.829b		60							rts							        rts
444			.829c																		_digit:
445			.829c		18							clc							        clc
446			.829d		69 30						adc #$30				        adc #'0'
447			.829f		20 08 83				jsr $8308				        jsr serial_out
448			.82a2		60							rts							        rts
452			.82a3																		write_byte:
453			.82a3		aa							tax							        tax
454			.82a4		4a							lsr a						        lsr
455			.82a5		4a							lsr a						        lsr
456			.82a6		4a							lsr a						        lsr
457			.82a7		4a							lsr a						        lsr
458			.82a8		20 8f 82				jsr $828f				        jsr write_nibble ; write upper nibble
459			.82ab		8a							txa							        txa
460			.82ac		29 0f						and #$0f				        and #$0f
461			.82ae		20 8f 82				jsr $828f				        jsr write_nibble ; write lower nibble
462			.82b1		60							rts							        rts
467			.82b2																		read_hex:
468			.82b2		20 24 83				jsr $8324				        jsr serial_wait
469			.82b5		20 d0 82				jsr $82d0				        jsr hextobin
470			.82b8		0a							asl a						        asl
471			.82b9		0a							asl a						        asl
472			.82ba		0a							asl a						        asl
473			.82bb		0a							asl a						        asl
474			.82bc		85 a0						sta $a0					        sta TEMP        ; store upper nibble
475			.82be		20 24 83				jsr $8324				        jsr serial_wait
476			.82c1		20 d0 82				jsr $82d0				        jsr hextobin
477			.82c4		05 a0						ora $a0					        ora TEMP
478			.82c6		85 a0						sta $a0					        sta TEMP
479			.82c8		18							clc							        clc ; update checksum
480			.82c9		65 a3						adc $a3					        adc LD_CHECKSUM
481			.82cb		85 a3						sta $a3					        sta LD_CHECKSUM
482			.82cd		a5 a0						lda $a0					        lda TEMP
483			.82cf		60							rts							        rts
488			.82d0																		hextobin:
489			.82d0		c9 41						cmp #$41				        cmp #'A'
490			.82d2		b0 06						bcs $82da				        bcs _alpha ; char >= 'A'
491			.82d4		38							sec							        sec ; else assume char is decimal digit
492			.82d5		e9 30						sbc #$30				        sbc #'0'
493			.82d7		29 0f						and #$0f				        and #$0f
494			.82d9		60							rts							        rts
495			.82da																		_alpha:
496			.82da		09 20						ora #$20				        ora  #%00100000 ; convert to lower case
497			.82dc		38							sec							        sec
498			.82dd		e9 57						sbc #$57				        sbc #'a'-10
499			.82df		29 0f						and #$0f				        and #$0f
500			.82e1		60							rts							        rts
505			.82e2																		tolower:
506			.82e2		c9 41						cmp #$41				        cmp #'A'
507			.82e4		90 06						bcc $82ec				        bcc _not_upper
508			.82e6		c9 5a						cmp #$5a				        cmp #'Z'
509			.82e8		b0 02						bcs $82ec				        bcs _not_upper
510			.82ea		09 20						ora #$20				        ora  #%00100000 ; set bit 5 (A=$41, a=$61)
511			.82ec																		_not_upper:
512			.82ec		60							rts							        rts
518			.82ed																		bytetobin:
519			.82ed		20 d0 82				jsr $82d0				        jsr hextobin
520			.82f0		0a							asl a						        asl
521			.82f1		0a							asl a						        asl
522			.82f2		0a							asl a						        asl
523			.82f3		0a							asl a						        asl
524			.82f4		85 a0						sta $a0					        sta TEMP        ; store upper nibble
525			.82f6		8a							txa							        txa
526			.82f7		20 d0 82				jsr $82d0				        jsr hextobin
527			.82fa		05 a0						ora $a0					        ora TEMP
528			.82fc		60							rts							        rts
531			.82fd																		serial_init:
532			.82fd		a9 10						lda #$10				        lda #%00010000  ; 1 stop bit, 8 data bits, 115200bps, internal clock
533			.82ff		8d 23 7f				sta $7f23				        sta ACIA_CTL
534			.8302		a9 0b						lda #$0b				        lda #%00001011  ; no parity, no echo, no TX interrupts, /RTS=low, no RX interrupts, /DTR=low
535			.8304		8d 22 7f				sta $7f22				        sta ACIA_CMD
536			.8307		60							rts							        rts
541			.8308																		serial_out:
542			.8308		8d 20 7f				sta $7f20				        sta ACIA_DATA
543			.830b		20 2f 83				jsr $832f				        jsr wait100us   ; 115200bps -> 87us/character
544			.830e		60							rts							        rts
549			.830f																		serial_out_no_wait:
550			.830f		8d 20 7f				sta $7f20				        sta ACIA_DATA
551			.8312		20 2f 83				jsr $832f				        jsr wait100us   ; 115200bps -> 87us/character
552			.8315		60							rts							        rts
557			.8316																		serial_in:
558			.8316		ad 21 7f				lda $7f21				        lda  ACIA_STATUS
559			.8319		29 08						and #$08				        and #%00001000  ; bit3 = Receiver Data Register Full
560			.831b		f0 05						beq $8322				        beq _empty
561			.831d		ad 20 7f				lda $7f20				        lda ACIA_DATA
562			.8320		38							sec							        sec
563			.8321		60							rts							        rts
564			.8322																		_empty:
565			.8322		18							clc							        clc
566			.8323		60							rts							        rts
571			.8324																		serial_wait:
572			.8324		20 16 83				jsr $8316				        jsr serial_in
573			.8327		90 fb						bcc $8324				        bcc serial_wait
574			.8329		60							rts							        rts
577			.832a																		wait20clk:
578			.832a		ea							nop							        nop ; CYC=2
579			.832b		ea							nop							        nop ; CYC=2
580			.832c		ea							nop							        nop ; CYC=2
581			.832d		ea							nop							        nop ; CYC=2
582			.832e		60							rts							        rts ; CYC=12 (jsr+rts)
586			.832f																		wait100us:
587			.832f		84 a0						sty $a0					        sty TEMP           ; CYC=3
588			.8331		a0 03						ldy #$03				        ldy #4*CLOCK_MHZ-1 ; CYC=2
589			.8333																		_loop:
590			.8333		20 2a 83				jsr $832a				        jsr wait20clk
591			.8336		88							dey							        dey       ; CYC=2
592			.8337		d0 fa						bne $8333				        bne _loop ; CYC=3
593			.8339		ea							nop							        nop       ; CYC=2
594			.833a		ea							nop							        nop       ; CYC=2
595			.833b		ea							nop							        nop       ; CYC=2
596			.833c		a4 a0						ldy $a0					        ldy TEMP  ; CYC=4
597			.833e		60							rts							        rts       ; CYC=12 (jsr+rts)
599			.833f																		write_msg:
600			.833f		a0 00						ldy #$00				        ldy #$0
601			.8341																		_loop:
602			.8341		b1 a1						lda ($a1),y			        lda (MSGL),y
603			.8343		f0 06						beq $834b				        beq _done
604			.8345		20 08 83				jsr $8308				        jsr serial_out
605			.8348		c8							iny							        iny
606			.8349		d0 f6						bne $8341				        bne _loop
607			.834b																		_done:
608			.834b		60							rts							        rts
610			.834c																		write_char:
611			.834c		20 08 83				jsr $8308				        jsr serial_out
612			.834f																		write_eol:
613			.834f		a9 0d						lda #$0d				        lda #CR
614			.8351		20 08 83				jsr $8308				        jsr serial_out
615			.8354		a9 0a						lda #$0a				        lda #LF
616			.8356		20 08 83				jsr $8308				        jsr serial_out
617			.8359		60							rts							        rts
619			.835a																		nmi:
620			.835a		40							rti							        rti
622			.835b																		irq:
623			.835b		40							rti							        rti
625			>835c		4d 6f 6e 69 74 6f 72 20					MSG_WELCOME:   .text "Monitor 1.0.1", CR, LF, 0
				>8364		31 2e 30 2e 31 0d 0a 00
626			>836c		75 6e 6b 6e 6f 77 6e 20					MSG_UNK_CMD:   .text "unknown command", CR, LF, 0
				>8374		63 6f 6d 6d 61 6e 64 0d 0a 00
627			>837e		64 6f 77 6e 6c 6f 61 64					MSG_DL_START:  .text "download started", CR, LF, 0
				>8386		20 73 74 61 72 74 65 64 0d 0a 00
628			>8391		0d 0a 64 6f 77 6e 6c 6f					MSG_DL_END:    .text  CR, LF, "download succeeded", CR, LF, 0
				>8399		61 64 20 73 75 63 63 65 65 64 65 64 0d 0a 00
629			>83a8		0d 0a 64 6f 77 6e 6c 6f					MSG_DL_ABORT:  .text  CR, LF, "download aborted", CR, LF, 0
				>83b0		61 64 20 61 62 6f 72 74 65 64 0d 0a 00
630			>83bd		75 6e 6b 6e 6f 77 6e 20					MSG_UNK_REC:   .text "unknown record type", CR, LF, 0
				>83c5		72 65 63 6f 72 64 20 74 79 70 65 0d 0a 00
631			>83d3		63 68 65 63 6b 73 75 6d					MSG_CKS_ERR:   .text "checksum error", CR, LF, 0
				>83db		20 65 72 72 6f 72 0d 0a 00
632			>83e4		6c 69 6e 65 20 62 75 66					MSG_OVERFLOW:  .text "line buffer overlfow", CR, LF, 0
				>83ec		66 65 72 20 6f 76 65 72 6c 66 6f 77 0d 0a 00
633			>83fb		3f 20 20 20 20 20 20 20					MSG_HELP:      .text "?              show help", CR, LF
				>8403		20 20 20 20 20 20 20 73 68 6f 77 20 68 65 6c 70
				>8413		0d 0a
634			>8415		6c 20 20 20 20 20 20 20					               .text "l              start intel hex loader", CR, LF
				>841d		20 20 20 20 20 20 20 73 74 61 72 74 20 69 6e 74
				>842d		65 6c 20 68 65 78 20 6c 6f 61 64 65 72 0d 0a
635			>843c		72 31 30 30 30 20 20 20					               .text "r1000          read memory line", CR, LF
				>8444		20 20 20 20 20 20 20 72 65 61 64 20 6d 65 6d 6f
				>8454		72 79 20 6c 69 6e 65 0d 0a
636			>845d		72 31 30 30 30 2d 31 30					               .text "r1000-101f     read memory block", CR, LF
				>8465		31 66 20 20 20 20 20 72 65 61 64 20 6d 65 6d 6f
				>8475		72 79 20 62 6c 6f 63 6b 0d 0a
637			>847f		77 31 30 30 30 3a 30 30					               .text "w1000:0011aabb write block", CR, LF
				>8487		31 31 61 61 62 62 20 77 72 69 74 65 20 62 6c 6f
				>8497		63 6b 0d 0a
638			>849b		66 31 30 30 30 2d 31 30					               .text "f1000-1010:ea  fill block", CR, LF
				>84a3		31 30 3a 65 61 20 20 66 69 6c 6c 20 62 6c 6f 63
				>84b3		6b 0d 0a
639			>84b6		67 31 30 30 30 20 20 20					               .text "g1000          run program", CR, LF, 0
				>84be		20 20 20 20 20 20 20 72 75 6e 20 70 72 6f 67 72
				>84ce		61 6d 0d 0a 00
640			>84d3		73 79 6e 74 61 78 20 65					MSG_SYNTAX:    .text "syntax error", CR, LF, 0
				>84db		72 72 6f 72 0d 0a 00
643			>fffa		5a 83														        .word nmi       ; NMI
644			>fffc		00 80														        .word reset     ; RESET
645			>fffe		5b 83														        .word irq       ; IRQ/BRK

;******  End of listing
